import streamlit as st
import subprocess
import json
import base64
import hashlib
import os
import cv2
import numpy as np
from io import BytesIO
import datetime
import requests
from urllib.parse import quote_plus
from PIL import Image
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

# Streamlit sayfa ayarlarÄ±
st.set_page_config(page_title="Steganografi UygulamasÄ±", page_icon="ðŸ”’")
st.title("ðŸ”’ Steganografi UygulamasÄ±")

# YardÄ±mcÄ± Fonksiyonlar
def generate_ai_image(prompt, width=256, height=256):
    encoded_prompt = quote_plus(prompt)
    url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?width={width}&height={height}&nologo=true"
    response = requests.get(url, timeout=30)
    response.raise_for_status()
    img_bytes = BytesIO(response.content)
    img_bytes.seek(0)
    return img_bytes

def encrypt_data(data_bytes, key_string, original_filename=None):
    key = hashlib.sha256(key_string.encode()).digest()
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(data_bytes, AES.block_size))
    return json.dumps({
        'iv': base64.b64encode(cipher.iv).decode(),
        'ciphertext': base64.b64encode(ct_bytes).decode(),
        'filename': os.path.basename(original_filename) if original_filename else None
    })

def decrypt_data(json_str, key_string):
    key = hashlib.sha256(key_string.encode()).digest()
    data = json.loads(json_str)
    iv = base64.b64decode(data['iv'])
    ct = base64.b64decode(data['ciphertext'])
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(ct), data.get('filename'))

# GÃ¶rsel Steganografi FonksiyonlarÄ±
def encode_lsb(image_file, secret_data, output_format='PNG'):
    img = Image.open(image_file).convert("RGB")
    binary_secret = ''.join([format(ord(c), '08b') for c in str(secret_data)] + ['0']*40)
    
    pixels = np.array(img)
    data_index = 0
    
    for row in pixels:
        for pixel in row:
            for i in range(3):
                if data_index < len(binary_secret):
                    pixel[i] = (pixel[i] & 0xFE) | int(binary_secret[data_index])
                    data_index += 1

    buf = BytesIO()
    img.save(buf, format=output_format)
    return buf.getvalue()

def decode_lsb(image_file):
    img = Image.open(image_file).convert("RGB")
    pixels = np.array(img)
    binary_data = []
    
    for row in pixels:
        for pixel in row:
            for channel in pixel[:3]:
                binary_data.append(str(channel & 1))
    
    return ''.join(binary_data).split('00000000'*5)[0]

# Ses Steganografi FonksiyonlarÄ± (GÃ¼ncellenmiÅŸ)
def encode_lsb_audio(audio_file, secret_data, output_format='wav'):
    try:
        # 1. Convert to WAV format
        convert_cmd = [
            'ffmpeg', '-y', '-hide_banner', '-loglevel', 'error',
            '-i', 'pipe:0', '-f', 'wav', '-acodec', 'pcm_s16le',
            '-ar', '44100', '-ac', '1', 'pipe:1'
        ]
        
        p_convert = subprocess.run(
            convert_cmd,
            input=audio_file.getvalue(),
            capture_output=True
        )
        
        if p_convert.returncode != 0:
            st.error(f"DÃ¶nÃ¼ÅŸÃ¼m hatasÄ±: {p_convert.stderr.decode()}")
            return None

        # 2. Process audio data
        full_data = p_convert.stdout
        header = full_data[:44]
        audio_data = bytearray(full_data[44:])
        
        secret_str = str(secret_data)
        binary_secret = ''.join(f"{ord(c):08b}" for c in secret_str) + '0'*40
        
        data_index = 0
        for i in range(len(audio_data)):
            if data_index >= len(binary_secret):
                break
            audio_data[i] = (audio_data[i] & 0xFE) | int(binary_secret[data_index])
            data_index += 1

        # 3. Re-encode to target format
        encode_cmd = [
            'ffmpeg', '-y', '-hide_banner', '-loglevel', 'error',
            '-f', 'wav', '-i', 'pipe:0', '-f', output_format, 'pipe:1'
        ]
        
        p_encode = subprocess.run(
            encode_cmd,
            input=header + audio_data,
            capture_output=True
        )
        
        return BytesIO(p_encode.stdout) if p_encode.returncode == 0 else None

    except Exception as e:
        st.error(f"Ses kodlama hatasÄ±: {str(e)}")
        return None

def decode_lsb_audio(audio_file):
    try:
        # Convert to WAV format
        convert_cmd = [
            'ffmpeg', '-y', '-hide_banner', '-loglevel', 'error',
            '-i', 'pipe:0', '-f', 'wav', 'pipe:1'
        ]
        
        p_convert = subprocess.run(
            convert_cmd,
            input=audio_file.getvalue(),
            capture_output=True
        )
        
        audio_data = bytearray(p_convert.stdout[44:])
        binary_data = ''.join(str(byte & 1) for byte in audio_data)
        clean_data = binary_data.split('00000000'*5)[0]
        
        return ''.join(chr(int(clean_data[i:i+8], 2)) for i in range(0, len(clean_data), 8))
    
    except Exception as e:
        st.error(f"Ses Ã§Ã¶zme hatasÄ±: {str(e)}")
        return None

# Video Steganografi FonksiyonlarÄ± (GÃ¼ncellenmiÅŸ)
def encode_lsb_video(video_file, secret_data, output_format='mp4'):
    try:
        # 1. Extract video stream
        extract_cmd = [
            'ffmpeg', '-y', '-hide_banner', '-loglevel', 'error',
            '-i', 'pipe:0', '-f', 'rawvideo', '-pix_fmt', 'bgr24', 'pipe:1'
        ]
        
        p_extract = subprocess.run(
            extract_cmd,
            input=video_file.getvalue(),
            capture_output=True
        )
        
        # 2. Process video frames
        binary_secret = ''.join(f"{ord(c):08b}" for c in str(secret_data)) + '0'*40
        secret_index = 0
        
        # 3. Re-encode video
        encode_cmd = [
            'ffmpeg', '-y', '-hide_banner', '-loglevel', 'error',
            '-f', 'rawvideo', '-pix_fmt', 'bgr24',
            '-s', f'{width}x{height}', '-i', 'pipe:0',
            '-c:v', 'libx264', '-preset', 'fast',
            '-f', output_format, 'pipe:1'
        ]
        
        p_encode = subprocess.run(
            encode_cmd,
            input=processed_frames,
            capture_output=True
        )
        
        return (BytesIO(p_encode.stdout), f"output.{output_format}") if p_encode.returncode == 0 else (None, None)

    except Exception as e:
        st.error(f"Video kodlama hatasÄ±: {str(e)}")
        return None, None

def decode_lsb_video(video_file):
    try:
        # Extract raw video using pipes
        extract_cmd = [
            'ffmpeg', '-y',
            '-i', 'pipe:0',
            '-f', 'rawvideo',
            '-pix_fmt', 'bgr24',
            'pipe:1'
        ]
        p_extract = subprocess.Popen(
            extract_cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        raw_video, _ = p_extract.communicate(input=video_file.getvalue())
        
        # Process frames in memory...
        return decoded_data
    except Exception as e:
        st.error(f"Video Ã§Ã¶zme hatasÄ±: {str(e)}")
        return None

# Streamlit UI
def main():
    operation = st.sidebar.radio("Ä°ÅŸlem:", ["Gizle", "Ã‡Ã¶z"])
    media_type = st.sidebar.selectbox("Medya TÃ¼rÃ¼:", ["Resim", "Ses", "Video"])
    password = st.sidebar.text_input("Åžifre:", type="password")

    if operation == "Gizle":
        # Gizleme arayÃ¼zÃ¼
        st.header(f" secretive Veri Gizleme ({media_type})")

        # File size limits (adjust as needed)
        MAX_CARRIER_SIZE_MB = 50 # Max size for image/audio/video file
        MAX_SECRET_SIZE_MB = 20 # Max size for secret file
        MAX_CARRIER_SIZE_BYTES = MAX_CARRIER_SIZE_MB * 1024 * 1024
        MAX_SECRET_SIZE_BYTES = MAX_SECRET_SIZE_MB * 1024 * 1024
    
    
        # Secret data input
        st.subheader("1. Gizlenecek Veri")
        secret_choice = st.radio("Ne gizlemek istiyorsunuz?", ("Metin", "Dosya"), key="secret_choice")
    
        secret_data_to_embed_bytes = None
        original_secret_filename = None # Keep track of original filename
    
        if secret_choice == "Metin":
            secret_data_input = st.text_area("Gizlenecek metni girin:", key="secret_text")
            if secret_data_input:
                 try:
                    secret_data_to_embed_bytes = secret_data_input.encode('utf-8')
                    original_secret_filename = "gizli_metin.txt" # Assign a default name for text
                    # Check size
                    if len(secret_data_to_embed_bytes) > MAX_SECRET_SIZE_BYTES:
                         st.error(f"Metin verisi Ã§ok bÃ¼yÃ¼k ({len(secret_data_to_embed_bytes)/(1024*1024):.2f} MB). Maksimum limit: {MAX_SECRET_SIZE_MB} MB.")
                         secret_data_to_embed_bytes = None # Reset if too large
                 except Exception as e:
                      st.error(f"Metin UTF-8'e dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼rken hata: {e}")
                      secret_data_to_embed_bytes = None
            else:
                 # Provide a subtle hint if empty
                 # st.info("Gizlemek iÃ§in bir metin girin.")
                 pass
        else: # Secret choice is File
            secret_file = st.file_uploader(f"Gizlenecek dosyayÄ± yÃ¼kleyin (Maksimum {MAX_SECRET_SIZE_MB} MB):", type=None, key="secret_file")
            if secret_file is not None:
                if secret_file.size > MAX_SECRET_SIZE_BYTES:
                     st.error(f"Gizlenecek dosya '{secret_file.name}' boyutu ({secret_file.size/(1024*1024):.2f} MB) limiti ({MAX_SECRET_SIZE_MB} MB) aÅŸÄ±yor.")
                else:
                     original_secret_filename = secret_file.name
                     secret_data_to_embed_bytes = secret_file.getvalue()
    
    
        # Carrier media input
        st.subheader("2. TaÅŸÄ±yÄ±cÄ± Medya")
    
        uploaded_media_file = None
        media_source = None # Track if AI or uploaded file
    
        if "Resim" in media_type:
            # Option for AI image generation or upload
            media_source = st.radio("GÃ¶rsel kaynaÄŸÄ±:", ("Dosya yÃ¼kle", "AI ile oluÅŸtur"), key="image_source")
    
            if media_source == "AI ile oluÅŸtur":
                 st.markdown("#### AI ile GÃ¶rsel OluÅŸturma")
                 ai_prompt = st.text_input("GÃ¶rsel iÃ§in aÃ§Ä±klama (prompt):", value="Renkli soyut desen", key="ai_prompt")
                 # --- DÃœZELTME BAÅžLANGICI ---
                 resolution_options = ["128x128", "256x256", "384x384", "512x512"]
                 default_resolution_str = "256x256"
    
                 selected_resolution_str = st.select_slider(
                     "GÃ¶rsel Ã§Ã¶zÃ¼nÃ¼rlÃ¼ÄŸÃ¼:",
                     options=resolution_options,
                     value=default_resolution_str, # VarsayÄ±lan deÄŸer olarak string kullanÄ±ldÄ±
                     # format_func'a artÄ±k gerek yok, string'ler zaten aÃ§Ä±klayÄ±cÄ±
                     key="ai_res_str" # Anahtar ismi deÄŸiÅŸtirildi (opsiyonel ama iyi pratik)
                 )
    
                 # SeÃ§ilen string'i (width, height) tuple'Ä±na dÃ¶nÃ¼ÅŸtÃ¼r
                 try:
                     width_str, height_str = selected_resolution_str.split('x')
                     ai_resolution_tuple = (int(width_str), int(height_str))
                     # EÄŸer baÅŸka yerde tuple'a ihtiyaÃ§ varsa session state'e kaydedilebilir
                     # st.session_state.ai_selected_resolution_tuple = ai_resolution_tuple
                 except Exception as e:
                     st.error(f"Ã‡Ã¶zÃ¼nÃ¼rlÃ¼k ayrÄ±ÅŸtÄ±rÄ±lamadÄ±: {e}")
                     # Hata durumunda varsayÄ±lana dÃ¶n
                     ai_resolution_tuple = (256, 256)
                     # st.session_state.ai_selected_resolution_tuple = ai_resolution_tuple
                # --- DÃœZELTME SONU ---
    
                 # Store AI generated image in session state to avoid regeneration on every interaction
                 # Session state anahtarlarÄ±nÄ± kontrol et/gÃ¼ncelle
                 if 'ai_generated_image' not in st.session_state:
                     st.session_state.ai_generated_image = None
                 if 'last_ai_prompt' not in st.session_state:
                     st.session_state.last_ai_prompt = ""
                 if 'last_ai_res_str' not in st.session_state: # Anahtar adÄ±nÄ± string'e gÃ¶re gÃ¼ncelle
                     st.session_state.last_ai_res_str = ""
    
    
                 col1, col2 = st.columns(2)
                 with col1:
                     if st.button("Ã–nizleme OluÅŸtur/Yenile", key="ai_preview"):
                         if ai_prompt:
                              with st.spinner("AI gÃ¶rsel oluÅŸturuluyor..."):
                                  # DÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmÃ¼ÅŸ tuple'Ä± kullan
                                  st.session_state.ai_generated_image = generate_ai_image(ai_prompt, ai_resolution_tuple[0], ai_resolution_tuple[1])
                                  st.session_state.last_ai_prompt = ai_prompt
                                  # Session state'e string gÃ¶sterimini kaydet
                                  st.session_state.last_ai_res_str = selected_resolution_str
                                  st.success("AI gÃ¶rsel hazÄ±r.")
                         else:
                              st.warning("LÃ¼tfen gÃ¶rsel iÃ§in bir aÃ§Ä±klama girin.")
    
                 # Display the generated image if available in state
                 if st.session_state.ai_generated_image:
                      with col2:
                          # BaÅŸlÄ±k iÃ§in session state'den string'i al
                          caption_res = st.session_state.get('last_ai_res_str', default_resolution_str)
                          st.image(st.session_state.ai_generated_image, caption=f"OluÅŸturulan: '{st.session_state.last_ai_prompt}' ({caption_res})", use_container_width=True)
                          # Set the uploaded_media_file to the generated image in memory
                          st.session_state.ai_generated_image.seek(0)
                          uploaded_media_file = st.session_state.ai_generated_image
    
    
            else: # media_source == "Dosya yÃ¼kle"
                 # ... (Dosya yÃ¼kleme kodu aynÄ± kalÄ±r)
                 uploaded_media_file = st.file_uploader(
                     f"TaÅŸÄ±yÄ±cÄ± gÃ¶rsel dosyasÄ±nÄ± yÃ¼kleyin (PNG, BMP Ã¶nerilir) (Maksimum {MAX_CARRIER_SIZE_MB} MB):",
                     type=["png", "bmp", "tiff", "jpg", "jpeg"],
                     key="carrier_image_upload")
    
        elif "Ses" in media_type:
             uploaded_media_file = st.file_uploader(
                 f"TaÅŸÄ±yÄ±cÄ± ses dosyasÄ±nÄ± yÃ¼kleyin (WAV, FLAC vb. kayÄ±psÄ±z Ã¶nerilir) (Maksimum {MAX_CARRIER_SIZE_MB} MB):",
                 # Allow common types, but conversion to WAV happens internally
                 type=["wav", "mp3", "flac", "aac", "ogg", "aiff"],
                 key="carrier_audio_upload")
    
        elif "Video" in media_type:
             uploaded_media_file = st.file_uploader(
                 f"TaÅŸÄ±yÄ±cÄ± video dosyasÄ±nÄ± yÃ¼kleyin (Maksimum {MAX_CARRIER_SIZE_MB} MB):",
                 # Allow common types, intermediate is lossless AVI, final is MKV/MP4
                 type=["mp4", "avi", "mkv", "mov", "mpeg", "wmv"],
                 key="carrier_video_upload")
    
    
        # Check uploaded carrier file size (only if not AI generated)
        if uploaded_media_file and media_source != "AI ile oluÅŸtur":
             # For UploadedFile object, size attribute exists
             if hasattr(uploaded_media_file, 'size') and uploaded_media_file.size > MAX_CARRIER_SIZE_BYTES:
                 st.error(f"TaÅŸÄ±yÄ±cÄ± medya dosyasÄ± '{uploaded_media_file.name}' boyutu ({uploaded_media_file.size/(1024*1024):.2f} MB) limiti ({MAX_CARRIER_SIZE_MB} MB) aÅŸÄ±yor.")
                 uploaded_media_file = None # Reset if too large
             # For BytesIO (like AI image), check getvalue() length
             elif hasattr(uploaded_media_file, 'getvalue') and len(uploaded_media_file.getvalue()) > MAX_CARRIER_SIZE_BYTES:
                  # This case shouldn't be hit for AI currently due to resolution limits, but good practice
                  st.error(f"OluÅŸturulan AI gÃ¶rselin boyutu ({len(uploaded_media_file.getvalue())/(1024*1024):.2f} MB) beklenmedik ÅŸekilde limiti ({MAX_CARRIER_SIZE_MB} MB) aÅŸÄ±yor.")
                  uploaded_media_file = None # Reset
    
    
        # --- Trigger Encoding ---
        st.subheader("3. Gizleme Ä°ÅŸlemi")
        st.markdown("---")
    
        if st.button("Veriyi Gizle ve Åžifrele", key="encode_button"):
            # --- Input Validation ---
            valid_input = True
            # if not password:
            #      st.error("LÃ¼tfen bir ÅŸifre girin.")
            #      valid_input = False
            if secret_data_to_embed_bytes is None:
                 st.error("LÃ¼tfen gizlenecek bir metin girin veya geÃ§erli bir dosya yÃ¼kleyin.")
                 valid_input = False
    
            # Check carrier media
            if media_source == "AI ile oluÅŸtur":
                if st.session_state.ai_generated_image is None:
                     st.error("LÃ¼tfen Ã¶nce bir AI gÃ¶rseli oluÅŸturun veya 'Dosya yÃ¼kle' seÃ§eneÄŸini kullanÄ±n.")
                     valid_input = False
                else:
                     # Use the image from session state
                     uploaded_media_file = st.session_state.ai_generated_image
                     uploaded_media_file.seek(0) # Ensure pointer is at the start
                     carrier_filename_for_output = "ai_generated_image"
            elif uploaded_media_file is None:
                st.error(f"LÃ¼tfen bir taÅŸÄ±yÄ±cÄ± {media_type.split(' ')[0].lower()} dosyasÄ± yÃ¼kleyin.")
                valid_input = False
            else:
                carrier_filename_for_output = os.path.splitext(uploaded_media_file.name)[0]
    
    
            # --- Proceed if Valid ---
            if valid_input:
                with st.spinner(f"{media_type} iÃ§ine veri gizleniyor ve ÅŸifreleniyor... LÃ¼tfen bekleyin..."):
                    try:
                        # 1. Encrypt the secret data (bytes)
                        print(f"Åžifrelenecek veri tipi: {type(secret_data_to_embed_bytes)}, Boyut: {len(secret_data_to_embed_bytes)} bytes")
                        print(f"Åžifreleme iÃ§in kullanÄ±lacak dosya adÄ±: {original_secret_filename}")
                        encrypted_json_data = encrypt_data(secret_data_to_embed_bytes, password, original_secret_filename)
    
                        if encrypted_json_data is None:
                            # Error handled within encrypt_data, just stop
                            raise ValueError("Åžifreleme baÅŸarÄ±sÄ±z oldu.") # Raise specific error to be caught below
    
                        # 2. Prepare output filename base
                        now_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                        output_filename_base = f"{now_str}_steg_{carrier_filename_for_output}"
    
                        # 3. Perform LSB encoding based on media type
                        output_bytes = None
                        final_output_filename_from_func = None # To capture filename from video func
    
                        if "Resim" in media_type:
                            # Image encoding expects PNG or BMP typically for LSB
                            output_filename = output_filename_base + ".png"
                            print(f"Resim LSB kodlama Ã§aÄŸrÄ±lÄ±yor. Ã‡Ä±ktÄ± adÄ±: {output_filename}")
                            output_bytes = encode_lsb(uploaded_media_file, encrypted_json_data, output_filename)
                            final_output_filename_from_func = output_filename # Use the generated name
    
                        elif "Ses" in media_type:
                             # Audio encoding converts to WAV internally, output is WAV
                             output_filename = output_filename_base + ".wav"
                             print(f"Ses LSB kodlama Ã§aÄŸrÄ±lÄ±yor. Ã‡Ä±ktÄ± adÄ±: {output_filename}")
                             output_bytes = encode_lsb_audio(uploaded_media_file, encrypted_json_data, output_filename)
                             final_output_filename_from_func = output_filename # Use the generated name
    
                        elif "Video" in media_type:
                             # Video encoding outputs MKV (preferred) or AVI
                             # The function now returns (bytes, final_filename)
                             output_filename_suggestion = output_filename_base + ".mkv" # Suggest MKV
                             print(f"Video LSB kodlama Ã§aÄŸrÄ±lÄ±yor. Ã–nerilen Ã§Ä±ktÄ± adÄ±: {output_filename_suggestion}")
                             output_bytes, final_output_filename_from_func = encode_lsb_video(uploaded_media_file, encrypted_json_data, output_filename_suggestion)
    
    
                        # 4. Provide download button if successful
                        if output_bytes and final_output_filename_from_func:
                             st.success("Veri baÅŸarÄ±yla gizlendi ve ÅŸifrelendi!")
                             st.info(f"OluÅŸturulan Dosya: {os.path.basename(final_output_filename_from_func)}")
    
                             # Determine mime type for download button
                             mime_type = "application/octet-stream" # Default
                             fname_lower = final_output_filename_from_func.lower()
                             if fname_lower.endswith(('.png', '.bmp', '.tiff')):
                                 mime_type = f"image/{os.path.splitext(fname_lower)[1][1:]}"
                             elif fname_lower.endswith('.wav'):
                                 mime_type = "audio/wav"
                             elif fname_lower.endswith('.avi'):
                                 mime_type = "video/x-msvideo"
                             elif fname_lower.endswith('.mkv'):
                                 mime_type = "video/x-matroska"
                             elif fname_lower.endswith('.mp4'):
                                 mime_type = "video/mp4"
    
    
                             st.download_button(
                                 label=f"GizlenmiÅŸ DosyayÄ± Ä°ndir ({os.path.basename(final_output_filename_from_func)})",
                                 data=output_bytes,
                                 file_name=os.path.basename(final_output_filename_from_func),
                                 mime=mime_type
                             )
                        else:
                             # Error message should have been shown in the respective encode function
                             st.error("Veri gizleme iÅŸlemi baÅŸarÄ±sÄ±z oldu. YukarÄ±daki hata mesajlarÄ±nÄ± kontrol edin.")
                             print("Encode fonksiyonundan geÃ§erli byte veya dosya adÄ± dÃ¶nmedi.")
    
                    except ValueError as ve: # Catch specific error from encryption
                         st.error(f"Ä°ÅŸlem HatasÄ±: {ve}")
                         print(f"ValueError: {ve}")
                    except Exception as e:
                        st.error(f"Gizleme iÅŸlemi sÄ±rasÄ±nda beklenmedik bir hata oluÅŸtu: {e}")
                        import traceback
                        print(f"Beklenmedik Hata (Encode Butonu): {e}\n{traceback.format_exc()}")
                        st.info("Girdi dosyalarÄ±nÄ±zÄ±n formatÄ±nÄ± ve boyutunu kontrol edin. Gerekli programlar (ffmpeg, ffprobe) sisteminizde kurulu mu?")

        pass
    else:
        # Ã‡Ã¶zme arayÃ¼zÃ¼
        st.header(f" secretive Veri Ã‡Ã¶zme ({media_type})")

        # Supported types for decoding based on encoding output
        decode_file_types = []
        if "Resim" in media_type:
             decode_file_types = ["png", "bmp", "tiff"] # Match encode output/common LSB types
             st.info("YalnÄ±zca PNG, BMP, TIFF gibi kayÄ±psÄ±z formatlarda gizlenmiÅŸ veriler gÃ¼venilir ÅŸekilde Ã§Ã¶zÃ¼lebilir.")
        elif "Ses" in media_type:
             decode_file_types = ["wav"] # Encode function outputs WAV
             st.info("Ses Ã§Ã¶zme iÅŸlemi yalnÄ±zca '.wav' formatÄ±ndaki dosyalarÄ± destekler (gizleme iÅŸlemi sÄ±rasÄ±nda bu formata dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼r).")
        elif "Video" in media_type:
             decode_file_types = ["avi", "mkv"] # Encode function outputs AVI (lossless intermediate) or MKV (muxed)
             st.info("Video Ã§Ã¶zme iÅŸlemi genellikle gizleme sonrasÄ± oluÅŸturulan '.avi' veya '.mkv' dosyalarÄ±nÄ± destekler.")
    
    
        steg_media_file = st.file_uploader(
            f"Ä°Ã§inde gizli veri olan {media_type.split(' ')[0].lower()} dosyasÄ±nÄ± yÃ¼kleyin:",
            type=decode_file_types,
            key="steg_file_upload"
        )
    
        st.markdown("---")
    
        if st.button("Veriyi Ã‡Ã¶z", key="decode_button"):
             # --- Input Validation ---
             valid_input = True
             # if not password:
             #     st.error("LÃ¼tfen ÅŸifreyi girin.")
             #     valid_input = False
             if steg_media_file is None:
                 st.error(f"LÃ¼tfen Ã§Ã¶zÃ¼lecek bir {media_type.split(' ')[0].lower()} dosyasÄ± yÃ¼kleyin.")
                 valid_input = False
    
             # --- Proceed if Valid ---
             if valid_input:
                  with st.spinner(f"{media_type} iÃ§inden veri Ã§Ä±karÄ±lÄ±yor ve ÅŸifre Ã§Ã¶zÃ¼lÃ¼yor..."):
                       try:
                           # 1. Extract the hidden JSON data using LSB decode
                           extracted_json_str = None
                           if "Resim" in media_type:
                               extracted_json_str = decode_lsb(steg_media_file)
                           elif "Ses" in media_type:
                               extracted_json_str = decode_lsb_audio(steg_media_file)
                           elif "Video" in media_type:
                               extracted_json_str = decode_lsb_video(steg_media_file)
    
                           if extracted_json_str:
                               print(f"Ã‡Ä±karÄ±lan JSON String (ilk 100 char): {extracted_json_str[:100]}")
                               # 2. Decrypt the extracted data
                               decrypted_bytes, retrieved_filename = decrypt_data(extracted_json_str, password)
    
                               if decrypted_bytes is not None:
                                   st.success("Veri baÅŸarÄ±yla Ã§Ä±karÄ±ldÄ± ve ÅŸifresi Ã§Ã¶zÃ¼ldÃ¼!")
    
                                   # 3. Try decoding as text, if fails, offer as file download
                                   try:
                                       decoded_text = decrypted_bytes.decode('utf-8')
                                       st.subheader("Ã‡Ã¶zÃ¼len Metin:")
                                       st.text_area("Metin:", decoded_text, height=150, key="decoded_text_area")
                                   except UnicodeDecodeError:
                                       # It's likely a file
                                       st.subheader("Ã‡Ã¶zÃ¼len Dosya:")
                                       now = datetime.datetime.now()
                                       timestamp = now.strftime("%Y%m%d_%H%M%S")
    
                                       # Construct filename using retrieved filename if available
                                       if retrieved_filename:
                                            # Basic check if it has an extension
                                            if '.' in retrieved_filename:
                                                 file_name_to_download = f"{timestamp}_decrypted_{retrieved_filename}"
                                            else: # No extension, maybe just a name part
                                                 file_name_to_download = f"{timestamp}_decrypted_{retrieved_filename}.bin" # Add default bin
                                       else:
                                           file_name_to_download = f"{timestamp}_decrypted_file.bin" # Default filename
    
    
                                       # Determine mime type for download button
                                       mime_type = "application/octet-stream" # Default
                                       if retrieved_filename:
                                           try:
                                                # Use mimetypes module for better guess
                                                import mimetypes
                                                mime_guess = mimetypes.guess_type(retrieved_filename)[0]
                                                if mime_guess:
                                                     mime_type = mime_guess
                                                print(f"Tahmin edilen MIME tÃ¼rÃ¼ ({retrieved_filename}): {mime_type}")
                                           except Exception as mime_e:
                                                print(f"MIME tÃ¼rÃ¼ tahmin edilirken hata: {mime_e}")
    
    
                                       st.download_button(
                                           label=f"Ã‡Ã¶zÃ¼len DosyayÄ± Ä°ndir ({os.path.basename(file_name_to_download)})",
                                           data=decrypted_bytes,
                                           file_name=os.path.basename(file_name_to_download),
                                           mime=mime_type
                                       )
                               else:
                                   # Decryption failed - error shown in decrypt_data
                                   # st.error("Åžifre Ã§Ã¶zme baÅŸarÄ±sÄ±z. Åžifre yanlÄ±ÅŸ veya veri bozuk.") # Redundant
                                   pass
                           else:
                               # Extraction failed - error likely shown in decode_lsb_*
                               st.error("Dosyadan gizli veri Ã§Ä±karÄ±lamadÄ±. Dosya formatÄ± doÄŸru mu? Bu dosya iÃ§ine veri gizlenmiÅŸ miydi?")
                               print("LSB decode fonksiyonu None veya boÅŸ string dÃ¶ndÃ¼rdÃ¼.")
    
                       except Exception as e:
                            st.error(f"Ã‡Ã¶zme iÅŸlemi sÄ±rasÄ±nda beklenmedik bir hata oluÅŸtu: {e}")
                            import traceback
                            print(f"Beklenmedik Hata (Decode Butonu): {e}\n{traceback.format_exc()}")
                            st.info("Ä°pucu: Dosya tÃ¼rÃ¼ ve ÅŸifrenizi kontrol edin. YÃ¼klediÄŸiniz dosyanÄ±n gerÃ§ekten gizlenmiÅŸ veri iÃ§erdiÄŸinden emin olun.")

    # --- Footer/Info ---
    st.sidebar.markdown("---")
    st.sidebar.info("Bu uygulama LSB (Least Significant Bit) steganografi tekniÄŸini ve AES ÅŸifrelemesini kullanÄ±r.")
    st.sidebar.warning("BÃ¼yÃ¼k dosyalarla Ã§alÄ±ÅŸmak zaman alabilir ve yÃ¼ksek bellek kullanÄ±mÄ± gerektirebilir.")
    st.sidebar.markdown("GeliÅŸtirici: Ali11git\nBST Python ile Algoritma")

if __name__ == "__main__":
    main()
