Ä°stediÄŸiniz tam olarak mÃ¼mkÃ¼n! FFmpeg'i **doÄŸrudan bellek Ã¼zerinde Ã§alÄ±ÅŸtÄ±rmak** iÃ§in Python'da `subprocess` modÃ¼lÃ¼yle **pipe'larÄ±** kullanabilirsiniz. Streamlit ile entegre Ã§Ã¶zÃ¼m iÃ§in adÄ±mlar:

---

### 1. **Streamlit'te DosyayÄ± BelleÄŸe Alma**
Streamlit'in `st.file_uploader`'Ä± dosyayÄ± zaten `BytesIO` benzeri bir bellek nesnesi olarak verir. Disk yazma/silme yapmanÄ±za gerek yok:
```python
uploaded_file = st.file_uploader("Dosya YÃ¼kle", type=["mp4", "avi"])
if uploaded_file:
    input_data = uploaded_file.read()  # DosyayÄ± direkt belleÄŸe al
```

---

### 2. **FFmpeg'i Pipe ile Ã‡alÄ±ÅŸtÄ±rma**
GeÃ§ici dosya kullanmadan veriyi **stdin** Ã¼zerinden FFmpeg'e gÃ¶nderip **stdout**'tan sonucu alÄ±n:

```python
import subprocess
from io import BytesIO

def convert_with_ffmpeg(input_bytes, output_format="mp4"):
    # FFmpeg komutunu hazÄ±rla (stdin/stdout kullanarak)
    cmd = [
        "ffmpeg",
        "-y",               # Overwrite izni
        "-i", "pipe:0",      # Girdiyi stdin'den al
        "-f", output_format, # Ã‡Ä±ktÄ± formatÄ±nÄ± belirt (Ã–NEMLÄ°!)
        "pipe:1"            # Ã‡Ä±ktÄ±yÄ± stdout'a yaz
    ]
    
    # Prosesi baÅŸlat
    process = subprocess.Popen(
        cmd,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    # Veriyi gÃ¶nder ve Ã§Ä±ktÄ±yÄ± al
    stdout_data, stderr_data = process.communicate(input=input_bytes)
    
    if process.returncode != 0:
        raise Exception(f"FFmpeg Error: {stderr_data.decode()}")
    
    return BytesIO(stdout_data)
```

---

### 3. **Streamlit'te KullanÄ±m**
DÃ¶nÃ¼ÅŸtÃ¼rÃ¼len veriyi doÄŸrudan indirme butonuna baÄŸla:
```python
if uploaded_file:
    # FFmpeg ile dÃ¶nÃ¼ÅŸtÃ¼r
    output_buffer = convert_with_ffmpeg(input_data, "mp4")
    
    # Ä°ndirme butonu
    st.download_button(
        label="DÃ¶nÃ¼ÅŸtÃ¼rÃ¼len DosyayÄ± Ä°ndir",
        data=output_buffer,
        file_name=f"converted.{output_format}"
    )
```

---

### 4. **Ã–nemli Notlar**
- **Format Belirtme (`-f`):** FFmpeg'in pipe Ã¼zerinde Ã§alÄ±ÅŸÄ±rken Ã§Ä±ktÄ± formatÄ±nÄ± (`-f mp4`) aÃ§Ä±kÃ§a belirtin. Ã–rneÄŸin MP4 iÃ§in `-f mp4` kullanÄ±n.
- **Bellek YÃ¶netimi:** BÃ¼yÃ¼k dosyalarda `stdout_data`'yÄ± parÃ§alar halinde (`chunks`) okuyup iÅŸleyebilirsiniz.
- **Hata KontrolÃ¼:** `stderr_data`'yÄ± kontrol ederek FFmpeg hatalarÄ±nÄ± yakalayÄ±n.

---

### 5. **Tam Ã–rnek Kod**
```python
import streamlit as st
import subprocess
from io import BytesIO

def convert_with_ffmpeg(input_bytes, output_format):
    cmd = [
        "ffmpeg",
        "-y",
        "-i", "pipe:0",
        "-f", output_format,
        "pipe:1"
    ]
    process = subprocess.Popen(
        cmd,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    stdout, stderr = process.communicate(input=input_bytes)
    if process.returncode != 0:
        st.error(f"Hata: {stderr.decode()}")
        return None
    return BytesIO(stdout)

# Streamlit UI
st.title("Steganografi DÃ¶nÃ¼ÅŸtÃ¼rÃ¼cÃ¼")
uploaded_file = st.file_uploader("Dosya SeÃ§", type=["mp4", "avi", "mov"])
output_format = st.selectbox("Ã‡Ä±ktÄ± FormatÄ±", ["mp4", "avi", "mov"])

if uploaded_file and output_format:
    input_data = uploaded_file.read()
    output_buffer = convert_with_ffmpeg(input_data, output_format)
    if output_buffer:
        st.download_button(
            "Ä°ndir",
            data=output_buffer,
            file_name=f"converted.{output_format}"
        )
```

---

### 6. **Optimizasyonlar**
- **BÃ¼yÃ¼k Dosyalar iÃ§in:** `communicate()` yerine stdin/stdout'u parÃ§alar halinde okuyup yazabilirsiniz.
- **Progress Bar:** FFmpeg'in ilerlemesini Streamlit'te gÃ¶stermek iÃ§in Ã¶zel Ã§Ã¶zÃ¼mler kullanabilirsiniz.

Bu yÃ¶ntemle **geÃ§ici dosya yazma/silme** iÅŸlemlerini tamamen ortadan kaldÄ±rabilirsiniz! ğŸš€
